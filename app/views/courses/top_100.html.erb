<% content_for :google_maps, true %>

<style>
  html {
    scroll-behavior: smooth;
  }
  
  /* Sticky navigation styling */
  .sticky-nav {
    position: -webkit-sticky;
    position: sticky;
    top: 0;
    z-index: 1000;
    background-color: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  /* Active state for navigation */
  .nav-link.active {
    background-color: rgba(53, 94, 59, 0.1);
    font-weight: 600;
  }
  
  /* Custom line clamp for truncated text */
  .line-clamp-4 {
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
    max-height: 6em;
    text-overflow: ellipsis;
  }

  /* Fix Google Maps positioning to remove unwanted margin */
  #top-100-map {
    position: relative !important;
    overflow: visible !important;
  }
  
  #top-100-map > div {
    position: relative !important;
  }

  /* Ensure info windows stay within map bounds */
  .gm-style-iw {
    max-height: calc(100vh - 8rem) !important;
    z-index: 1 !important;
  }
  
  .gm-style-iw-c {
    z-index: 1 !important;
  }

  /* Responsive grid adjustments for overlay */
  @media (max-width: 1279px) {
    .grid-overlay .grid {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
  }
  
  @media (max-width: 767px) {
    /* Simple mobile approach: full screen map OR full screen list */
    .mobile-container {
      position: relative;
    }
    
    /* Map takes full viewport on mobile - override ALL other styles */
    .map-container {
      height: 100vh !important;
      width: 100vw !important;
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      z-index: 10 !important;
      margin: 0 !important;
      padding: 0 !important;
    }
    
    /* Override any Tailwind classes that might interfere */
    .map-container.h-\[calc\(100vh-3\.5rem\)\] {
      height: 100vh !important;
    }
    
    .map-container.relative {
      position: fixed !important;
    }
    
    .map-container.sticky {
      position: fixed !important;
    }
    
    /* List view takes full screen when shown */
    .grid-overlay {
      position: fixed !important;
      top: 0 !important;
      left: 0 !important;
      width: 100vw !important;
      height: 100vh !important;
      background: white !important;
      z-index: 20 !important;
      overflow-y: auto !important;
      padding: 1rem !important;
      display: none; /* Hidden by default, show map first */
    }
    
    /* When list view is active */
    .grid-overlay.active {
      display: block !important;
    }
    
    /* Hide map when list is active */
    .map-container.hidden {
      display: none !important;
    }
    
    /* Ensure map can initialize properly and takes full space */
    #top-100-map {
      position: absolute !important;
      top: 0 !important;
      left: 0 !important;
      width: 100vw !important;
      height: 100vh !important;
      overflow: visible !important;
    }
    
    #top-100-map > div {
      position: absolute !important;
      top: 0 !important;
      left: 0 !important;
      width: 100vw !important;
      height: 100vh !important;
    }
  }
</style>

<!-- Hero Banner -->
<div class="relative bg-cover bg-center h-[315px] flex items-center justify-center text-center text-white" style="background-image: linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)), url('<%= @courses.first&.image_url.presence || "https://source.unsplash.com/1600x900/?golf" %>');">
  <div class="max-w-4xl mx-auto px-4">
    <h1 class="text-4xl md:text-5xl font-bold mb-4">
      The Top 100 Golf Courses in the United States
    </h1>
    <p class="text-md md:text-xl">
      Explore the top <%= @courses.size %> golf courses in the United States.
      <% if @average_top_100_green_fee %>
        The average green fee is approximately <%= number_to_currency(@average_top_100_green_fee, precision: 0) %>.
      <% end %>
    </p>
  </div>
</div> 

<!-- Full-Width Map with Overlapping Grid -->
<div class="relative w-full mobile-container" data-controller="map" data-map-markers-value="<%= [
         *@courses.select { |c| c.latitude.present? && c.longitude.present? }.map { |course| {
           latitude: course.latitude.to_f,
           longitude: course.longitude.to_f,
           name: course.name,
           id: course.id,
           type: 'course',
           image_url: course.image_url,
           green_fee: number_to_currency(course.green_fee, precision: 0),
           course_type: course.course_type.humanize,
           number_of_holes: course.number_of_holes,
           par: course.par,
           yardage: course.yardage,
           info: "#{course.name}<br>#{course.course_type.humanize}<br>#{number_to_currency(course.green_fee, precision: 0)}"
         }}
       ].to_json %>">
  
  <!-- Full-Width Map -->
  <div class="map-container w-full h-[calc(100vh-3.5rem)] bg-white overflow-hidden sticky top-14" 
       id="top-100-map"
       data-map-target="mapElement">
  </div>

  <!-- Mobile Toggle Button -->
  <button id="mobile-view-toggle" 
          class="md:hidden fixed bottom-6 right-6 z-30 bg-green-600 hover:bg-green-700 text-white p-4 rounded-full shadow-lg transition-colors duration-200">
    <svg id="list-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
    </svg>
    <svg id="map-icon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7"></path>
    </svg>
  </button>

  <!-- Overlapping Grid -->
  <div class="grid-overlay absolute top-0 right-8 w-96 h-[calc(100vh-3.5rem)] bg-white/95 backdrop-blur-sm rounded-lg shadow-xl border border-gray-200 overflow-hidden z-10">
    <div class="h-full overflow-y-auto">
      <div class="p-4 border-b border-gray-200 bg-green-50/80 backdrop-blur-sm">
        <div class="flex items-center">
          <svg class="w-4 h-4 text-green-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="text-green-800 text-xs font-medium">
            Top <%= @courses.size %> Golf Courses in the US
          </p>
        </div>
      </div>
      <div class="grid grid-cols-1 gap-4 p-4">
        <% @courses.each_with_index do |course, index| %>
          <div class="course-card" 
               data-course-id="<%= course.id %>"
               data-action="mouseenter->map#highlightMarkerOnHoverGeneric mouseleave->map#resetMarkerOnHoverGeneric"
               data-map-target="card">
            <%= render partial: "shared/card", locals: { 
              item: course,
              type: 'course',
              link_path: course_path(course),
              show_details: true,
              ranking: index + 1
            } %>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  // Simple mobile view toggle
  document.addEventListener('DOMContentLoaded', function() {
    const toggleButton = document.getElementById('mobile-view-toggle');
    const mapContainer = document.querySelector('.map-container');
    const listContainer = document.querySelector('.grid-overlay');
    const listIcon = document.getElementById('list-icon');
    const mapIcon = document.getElementById('map-icon');
    
    let isListView = false;
    
    if (toggleButton) {
      toggleButton.addEventListener('click', function() {
        isListView = !isListView;
        
        if (isListView) {
          // Show list, hide map
          listContainer.classList.add('active');
          mapContainer.classList.add('hidden');
          listIcon.classList.add('hidden');
          mapIcon.classList.remove('hidden');
        } else {
          // Show map, hide list
          listContainer.classList.remove('active');
          mapContainer.classList.remove('hidden');
          listIcon.classList.remove('hidden');
          mapIcon.classList.add('hidden');
          
          // Trigger map resize when returning to map view
          if (window.mapController && window.mapController.map) {
            setTimeout(() => {
              google.maps.event.trigger(window.mapController.map, 'resize');
            }, 100);
          }
        }
      });
    }
    
    // Simple map resize handler for orientation changes
    window.addEventListener('orientationchange', function() {
      if (!isListView && window.mapController && window.mapController.map) {
        setTimeout(() => {
          google.maps.event.trigger(window.mapController.map, 'resize');
        }, 500);
      }
    });
  });
</script> 